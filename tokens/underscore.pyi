# coding: utf8
from __future__ import unicode_literals

from typing import Any, Dict, List, Optional, Set, Tuple


class Underscore(object):
    mutable_types = (Dict[Any,Any], List[Any], Set[Any])
    doc_extensions: Dict[Any,Any]
    span_extensions: Dict[Any,Any]
    token_extensions: Dict[Any,Any]
    def __init__(
        self,
        extensions: Dict[str, Tuple[Any, Any, Any, Any]],
        obj: Any,
        start: Optional[int] = ...,
        end: Optional[int] = ...,
    ): ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def set(self, name: str, value: Any) -> None: ...
    def get(self, name: str) -> Any: ...
    def has(self, name: str) -> bool: ...
    def _get_key(self, name: str) -> Tuple[Any, Any, Any, Any]: ...

def get_ext_args(**kwargs: Any) -> Tuple[Any, Any, Any, Any]: ...
def is_writable_attr(ext: Tuple[Any, Any, Any, Any]) -> bool: ...
